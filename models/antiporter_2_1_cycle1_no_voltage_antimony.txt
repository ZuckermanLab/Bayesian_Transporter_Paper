  
// Created by libAntimony v2.12.0
model transporter_2_1_antiporter_cycle1()

# Model by August George 2023


########## Initialization (general) ##########
# physical constants:
const elem_charge = 1.602e-19;  # Coulombs
const N_av = 6.022e23;  # N particles/mole
const F = 96485;  # Faraday's constant, in C/mol
const R = 8.314;  # Gas constant in J/(mol K)
const T = 298.15;  # room temperature in Kelvin


# experimental parameters:
var n_liposomes = 1e11;  # counts (not moles)
var avg_liposome_diameter = 1e-7; # in meters
V_scale = 1;
var n_transporters := 1e13/2.0;  # counts (not moles)
var n_transporters_per_liposome := n_transporters/n_liposomes;  # counts (not moles)
var liposome_surface_area := 4*3.14159*(avg_liposome_diameter/2)*(avg_liposome_diameter/2);  # in m^2
var liposome_capacitance = 0.0075;  # F/m^2 (ref=0.75uF/cm^2)
var C_m_per_liposome := liposome_capacitance*liposome_surface_area;
var C_m_total := C_m_per_liposome*n_liposomes;

# compartments (totals):
var v_out_tot = 7e-5; # total external volume in liters 
var v_m_tot = 1.9e-8; # total membrane volume in liters 
var v_in_tot = 7e-8; # total internal volume in liters 
var v_out_lipo := v_out_tot/n_liposomes; # external volume per lipsome in liters 
var v_m_lipo := v_m_tot/n_liposomes; # membrane volume per lipsome in liters 
var v_in_lipo := v_in_tot/n_liposomes; # internal volume per lipsome in liters 

# initial external ion (H_out) concentration (mol/L) and amounts (mol) 
conc_H_out_0 = 1e-7;  # moles/L
species conc_H_out = conc_H_out_0;  # default unit type is substance / volume 

# initial external substrate (S_out) concentration (mol/L) and amounts (mol) 
conc_S_out_0 = 1e-3;  # moles/L
species conc_S_out = conc_S_out_0;

# initial internal ion (H_in) concentration (mol/L) and amounts (mol) 
conc_H_in_0 = 1e-7;  # moles/L
species conc_H_in = conc_H_in_0;

# initial internal substrate (S_in) concentration (mol/L) and amounts (mol) 
conc_S_in_0 = 1e-3;  # moles/L
species conc_S_in = conc_S_in_0;

# initial transporter protein concentration and counts
mol_transporters_tot_0 := (n_transporters/N_av);
mol_transporters_lipo_0 := (n_transporters_per_liposome/N_av);
conc_transporters_tot_0 := mol_transporters_tot_0/v_m_tot;
conc_transporters_lipo_0 := mol_transporters_lipo_0/v_m_lipo;


########## Initialization (model specific) ##########
# using single liposome concentration (same as total liposomes)
species conc_OF = conc_transporters_lipo_0;  # start all proteins in the 'OF' state
species conc_OF_Hb = 0.0; 
species conc_OF_Hb_Hb = 0.0; 
species conc_IF_Hb_Hb = 0.0; 
species conc_IF_Hb = 0.0; 
species conc_IF = 0.0;
species conc_IF_Sb = 0.0;
species conc_OF_Sb = 0.0;

# phi values (fraction of charge transported per reaction)
#const N_charge = 3;  # number of charges transported per cycle
#const N_protein_states = 8;  
#const phi_1 = N_charge/N_protein_states;
#const phi_2 = N_charge/N_protein_states;
#const phi_3 = N_charge/N_protein_states;
#const phi_4 = N_charge/N_protein_states;
#const phi_5 = N_charge/N_protein_states;
#const phi_6 = N_charge/N_protein_states;
#const phi_7 = N_charge/N_protein_states;
#const phi_8 = N_charge/N_protein_states;

## not using charge
const phi_1 = 0;
const phi_2 = 0;
const phi_3 = 0;
const phi_4 = 0;
const phi_5 = 0;
const phi_6 = 0;
const phi_7 = 0;
const phi_8 = 0;

# epsilon values: eps_ij - eps_ji = phi_ij, is the the fractional total charge movement from i to j:
const eps_1_f = phi_1/2;
const eps_1_r = -phi_1/2;
const eps_2_f = phi_2/2;
const eps_2_r = -phi_2/2;
const eps_3_f = phi_3/2;
const eps_3_r = -phi_3/2;
const eps_4_f = phi_4/2;
const eps_4_r = -phi_4/2;
const eps_5_f = phi_5/2;
const eps_5_r = -phi_5/2;
const eps_6_f = phi_6/2;
const eps_6_r = -phi_6/2;
const eps_7_f = phi_7/2;
const eps_7_r = -phi_7/2;
const eps_8_f = phi_8/2;
const eps_8_r = -phi_8/2;


########## Reactions (model specific) ##########
# note: H_out and S_out are constant (using $ prefix)
rxn1: conc_OF + $conc_H_out -> conc_OF_Hb; (k1_f*conc_OF*conc_H_out - k1_r*conc_OF_Hb);
rxn2: conc_OF_Hb + $conc_H_out -> conc_OF_Hb_Hb; (k2_f*conc_OF_Hb*conc_H_out - k2_r*conc_OF_Hb_Hb);
rxn3: conc_OF_Hb_Hb -> conc_IF_Hb_Hb; (k3_f*conc_OF_Hb_Hb - k3_r*conc_IF_Hb_Hb);

rxn4: conc_IF_Hb_Hb -> conc_IF_Hb + conc_H_in; (k4_f*conc_IF_Hb_Hb - k4_r*conc_IF_Hb*conc_H_in);
rxn5: conc_IF_Hb -> conc_IF + conc_H_in; (k5_f*conc_IF_Hb - k5_r*conc_IF*conc_H_in);
rxn6: conc_IF + conc_S_in -> conc_IF_Sb; (k6_f*conc_IF*conc_S_in - k6_r*conc_IF_Sb);

rxn7: conc_IF_Sb -> conc_OF_Sb; (k7_f*conc_IF_Sb - k7_r*conc_OF_Sb);
rxn8: conc_OF_Sb -> conc_OF + $conc_S_out; (k8_f*conc_OF_Sb - k8_r*conc_OF*conc_S_out);


########## Events (optional, not used in current implementation) ##########
#const conc_H_act = 5e-7; # mole/liter
#const conc_S_act = 1e-3; # mole/liter
#E1: at (time >= 1 && time < 2): conc_H_out = conc_H_act, conc_S_out = conc_S_act;
#E2: at (time >= 2): conc_H_out = 1e-7, conc_S_out = 1e-3;


########## Rate constant initialization (model specific) ##########
# base reaction rate constants (without membrane voltage adjustment)

const k1_f_0 = 1e10; # L/(mol*s)
const k1_r_0 = 1e3; # 1/s
const k2_f_0 = 1e10; # L/(mol*s)
const k2_r_0 = 1e3; # 1/s
const k3_f_0 = 1e2; # 1/s
const k3_r_0 = 1e2; # 1/s
const k4_f_0 = 1e3; # 1/s
const k4_r_0 = 1e10; # L/(mol*s)
const k5_f_0 = 1e3; # 1/s
const k5_r_0 = 1e10; # 1/s
const k6_f_0 = 1e7; # 1/s 
const k6_r_0 = 1e3; # 1/s 
const k7_f_0 = 1e2; # 1/s 
const k7_r_0 = 1e2; # 1/s 
const k8_f_0 = 1e3; # 1/s 


# effective reaction rate constants (with membrane voltage adjustment)
k1_f_v := exp(-eps_1_f*F*V_t/(R*T));
k1_r_v := exp(-eps_1_r*F*V_t/(R*T));
k2_f_v := exp(-eps_2_f*F*V_t/(R*T));
k2_r_v := exp(-eps_2_r*F*V_t/(R*T));
k3_f_v := exp(-eps_3_f*F*V_t/(R*T));
k3_r_v := exp(-eps_3_r*F*V_t/(R*T));
k4_f_v := exp(-eps_4_f*F*V_t/(R*T));
k4_r_v := exp(-eps_4_r*F*V_t/(R*T));
k5_f_v := exp(-eps_5_f*F*V_t/(R*T));
k5_r_v := exp(-eps_5_r*F*V_t/(R*T));
k6_f_v := exp(-eps_6_f*F*V_t/(R*T));
k6_r_v := exp(-eps_6_r*F*V_t/(R*T));
k7_f_v := exp(-eps_7_f*F*V_t/(R*T));
k7_r_v := exp(-eps_7_r*F*V_t/(R*T));
k8_f_v := exp(-eps_8_f*F*V_t/(R*T));

k1_f := k1_f_0*k1_f_v; 
k1_r := k1_r_0*k1_r_v;
k2_f := k2_f_0*k2_f_v;
k2_r := k2_r_0*k2_r_v;
k3_f := k3_f_0*k3_f_v;
k3_r := k3_r_0*k3_r_v;
k4_f := k4_f_0*k4_f_v;
k4_r := k4_r_0*k4_r_v;
k5_f := k5_f_0*k5_f_v;
k5_r := k5_r_0*k5_r_v;
k6_f := k6_f_0*k6_f_v;
k6_r := k6_r_0*k6_r_v;
k7_f := k7_f_0*k7_f_v;
k7_r := k7_r_0*k7_r_v;
k8_f := k8_f_0*k8_f_v;

# effective rate constant cycle constraint 
k8_r_0_constraint := (k1_f_0*k2_f_0*k3_f_0*k4_f_0*k5_f_0*k6_f_0*k7_f_0*k8_f_0)/(k1_r_0*k2_r_0*k3_r_0*k4_r_0*k5_r_0*k6_r_0*k7_r_0);
k8_r := exp(-(phi_1+phi_2+phi_3+phi_4+phi_5+phi_6+phi_7+(phi_8/2.0))*F*V_t/(R*T)) * k8_r_0_constraint;


########## Output (model specific) ##########
var net_molar_concentration_ion_influx := rxn4+rxn5-rxn6; # mol/(L*s)

# for sanity checks
var transporter_amount := (conc_OF + conc_OF_Hb + conc_OF_Hb_Hb + conc_IF_Hb_Hb + conc_IF_Hb + conc_IF + conc_IF_Sb + conc_OF_Sb)*v_m_lipo; // in moles (per liposome)
var H_conc_ratio := conc_H_out/conc_H_in;
var S_conc_ratio := conc_S_out/conc_S_in;

# current, charge, and voltage (per liposome)
var I_t_per_liposome := net_molar_concentration_ion_influx*v_in_lipo*N_av*elem_charge;  # C / s = A
var Q_t_per_liposome  = 0.0;
var Q_t_per_liposome' = I_t_per_liposome;  # Q = integral I(t). --> derivative integral I(t) = I(t)
var V_t_per_liposome := Q_t_per_liposome/C_m_per_liposome;  # membrane voltage, in volts

# current, charge, and voltage (total)
var I_t_total := I_t_per_liposome*n_liposomes;  # C / s = A
var Q_t_total := Q_t_per_liposome*n_liposomes;  # in Coulumbs
var V_t_total := V_t_per_liposome;  # membrane voltage, in volts. Assumes voltage drop across 1 liposome = voltage drop across all liposomes


# results to use 
var V_t := V_t_per_liposome*V_scale;  
var I_t := I_t_total;


########## Unit definitions ##########
unit substance_per_volume = mole / litre;
unit volume = litre;
unit length = metre;
unit area = metre^2;
unit time_unit = second;
unit substance = mole;
unit extent = mole;

########## Display Names ##########
time_unit is "time";
end
